#!/bin/sh
set -eu

#
# SolarView build script
#
# This script allows to package a SolarView app in a Docker image.
#

home=$(dirname "${0}")
if [ -z "${1-}" ]; then
  # The user did not select an app to build, so we give him a list of supported apps
  for app in $(find "${home}/app" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;); do apps="${apps:-$app}${apps:+ | $app}"; done
  >&2 echo "Syntax: $0 [${apps}]"
  return 1
fi
app_env="${home}/app/${1}/env"
arch_env="${home}/arch/$(arch)/env"

# read variables for current app and architecture and expose them to child processes
set -a
. "${app_env}"
. "${arch_env}"
APP_NAME="${APP_NAME:-$1}"
IMAGE_REPOSITORY="${IMAGE_REPOSITORY:-ckware}"
IMAGE_NAME="${IMAGE_NAME:-$(echo ${APP_NAME} | sed -E 's/^(solarview-|(.+)(-))fb$/solarview\3\2/')}"
IMAGE_FULLNAME="${IMAGE_REPOSITORY}/${IMAGE_NAME}"
IMAGE_DEFAULT_TAG="${IMAGE_DEFAULT_TAG:-latest}"
IMAGE_DEFAULT_ALIAS="${IMAGE_FULLNAME}:${IMAGE_DEFAULT_TAG}"
BUILD_ID=$(echo $(date -u +%Y%m%d_%H%M%S)-$(git rev-parse --short HEAD)-$(cat /dev/urandom | tr -dc '0-9' | fold -w 8 | head -n 1))

# build runtime image and remove intermediate image
build_args=$(for arg in 'BUILD_ID' 'APP_NAME' 'APP_ARCHIVE_URL' 'APP_BINARIES' \
                        $(cat "${arch_env}" "${app_env}" \
                        | sed --posix -n -E 's/^[\t ]*([^#][^\t ]*)=.*$/\1/p' \
                        | sort \
                        | uniq);
             do printf " --build-arg ${arg}"; done)
if [ "${DO_BUILD:-yes}" = 'yes' ]; then
  docker build -t "${IMAGE_DEFAULT_ALIAS}" ${build_args} "${home}"
  docker image prune -f --filter "label=build=${BUILD_ID}"
fi

# read variables for version and date from the image
env=$(mktemp) && echo $(docker run --rm "${IMAGE_DEFAULT_ALIAS}" cat /env) >>"${env}" && . "${env}" && rm "${env}"

# tag the image
docker image tag "${IMAGE_DEFAULT_ALIAS}" "${IMAGE_FULLNAME}:v${APP_VERSION}" &&\
docker image tag "${IMAGE_DEFAULT_ALIAS}" "${IMAGE_FULLNAME}:${APP_DATE}" &&\
{ [ "${APP_DATE}" = "${RELEASE_DATE}" ] || docker image tag "${IMAGE_DEFAULT_ALIAS}" "${IMAGE_FULLNAME}:r${RELEASE_DATE}"; }
docker image tag "${IMAGE_DEFAULT_ALIAS}" "${IMAGE_FULLNAME}:b${BUILD_ID}"

if [ "${DO_PUSH_MULTIARCH:-no}" = 'yes' ]; then
  arch="$(arch)"
  case "${arch}" in
    x86_64)   arch_id=amd64  ;;
    aarch64)  arch_id=arm64  ;;
    armv7*)   arch_id=arm/v7 ;;
    armv6)    arch_id=arm/v6 ;;
    arm*)     arch_id=arm    ;;
    *)        arch_id="${arch}" ;;
  esac
  for tag in "${IMAGE_DEFAULT_TAG}" "v${APP_VERSION}"; do
    image="${IMAGE_FULLNAME}:${arch_id}-${tag}"
    docker image tag "${IMAGE_DEFAULT_ALIAS}" "${image}"
    docker push "${image}"
  done
fi
